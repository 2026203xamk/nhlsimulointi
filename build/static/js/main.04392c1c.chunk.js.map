{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SimulateMatchPopup","_ref","teamA","teamB","onCancel","onSimulate","React","createElement","className","concat","Button","onClick","TeamList","_ref2","nhlTeams","selectedTeams","setSelectedTeams","useState","matchResults","setMatchResults","teamWins","setTeamWins","showPopup","setShowPopup","teamsForMatch","setTeamsForMatch","leagueTable","setLeagueTable","teamMatches","setTeamMatches","useEffect","storedTeams","JSON","parse","localStorage","getItem","storedResults","storedWins","initialLeagueTable","map","teamName","name","points","played","goalsFor","goalsAgainst","goalDifference","storedLeagueTable","storedTeamMatches","saveToLocalStorage","key","data","setItem","stringify","handleTeamClick","team","prevTeams","updatedTeams","length","includes","filter","selectedTeam","easternTeams","slice","Math","floor","westernTeams","getImageUrl","fileName","split","join","toLowerCase","process","index","src","alt","style","width","height","FontAwesomeIcon","icon","faCheck","handleSimulateMatch","handleCancelMatch","handleConfirmMatch","resultA","resultB","random","resultText","prevResults","updateLeagueTable","goalsForA","goalsForB","prevTable","updatedTable","forEach","sort","a","b","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","color","TableBody","result","opponentName","teamImageUrl","opponentImageUrl","display","alignItems","marginRight","onError","e","target","marginLeft","Object","entries","_ref3","wins","align","scope","handleEndSeason","clear","App","showInstructions","setShowInstructions","Router","Tabs","value","onChange","Tab","label","Link","to","Routes","Route","path","element","_ref4","onClose","position","top","left","transform","backgroundColor","padding","zIndex","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.04392c1c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Button from '@mui/material/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport './App.css';\n\n\n\nconst SimulateMatchPopup = ({ teamA, teamB, onCancel, onSimulate }) => {\n  return (\n    <div className=\"simulate-match-popup\">\n      <h3>{`${teamA} vs ${teamB}`}</h3>\n      <div className=\"button-container\">\n        <Button onClick={onSimulate}>Simuloi ottelu</Button>\n        <Button onClick={onCancel}>Peruuta</Button>\n      </div>\n    </div>\n  );\n};\n\nconst TeamList = ({ nhlTeams }) => {\n  const [selectedTeams, setSelectedTeams] = useState([]);\n  const [matchResults, setMatchResults] = useState([]);\n  const [teamWins, setTeamWins] = useState({});\n  const [showPopup, setShowPopup] = useState(false);\n  const [teamsForMatch, setTeamsForMatch] = useState([]);\n  const [leagueTable, setLeagueTable] = useState([]);\n  const [teamMatches, setTeamMatches] = useState({}); // Lisätty\n \n  \n\n  useEffect(() => {\n    const storedTeams = JSON.parse(localStorage.getItem('selectedTeams')) || [];\n    setSelectedTeams(storedTeams);\n  \n    const storedResults = JSON.parse(localStorage.getItem('matchResults')) || [];\n    setMatchResults(storedResults);\n  \n    const storedWins = JSON.parse(localStorage.getItem('teamWins')) || {};\n    setTeamWins(storedWins);\n  \n    // Jos paikallisessa tallennustilassa on sarjataulukko, käytetään sitä.\n    // Muussa tapauksessa alustetaan sarjataulukko kaikilla joukkueilla ja nolla pisteellä.\n    const initialLeagueTable = nhlTeams.map((teamName) => ({ name: teamName, points: 0, played: 0, goalsFor: 0, goalsAgainst: 0, goalDifference: 0 }));\n    const storedLeagueTable = JSON.parse(localStorage.getItem('leagueTable')) || initialLeagueTable;\n    setLeagueTable(storedLeagueTable);\n  \n    const storedTeamMatches = JSON.parse(localStorage.getItem('teamMatches')) || {};\n    setTeamMatches(storedTeamMatches);\n    // Lisätään nhlTeams riippuvuuslistaan, jotta varoitus katoaa.\n  }, [nhlTeams]);\n  \n\n  const saveToLocalStorage = (key, data) => {\n    localStorage.setItem(key, JSON.stringify(data));\n  };\n\n  const handleTeamClick = (team) => {\n    setSelectedTeams((prevTeams) => {\n      let updatedTeams;\n\n      if (prevTeams.length === 2) {\n        updatedTeams = [team];\n      } else {\n        updatedTeams = prevTeams.includes(team)\n          ? prevTeams.filter((selectedTeam) => selectedTeam !== team)\n          : [...prevTeams, team];\n      }\n\n      saveToLocalStorage('selectedTeams', updatedTeams);\n      return updatedTeams;\n    });\n  };\n\n  const updateLeagueTable = (teamA, teamB, goalsForA, goalsForB) => {\n    setLeagueTable((prevTable) => {\n      // Luo uusi taulukko syvällä kopioinnilla, jotta ei muuteta alkuperäistä taulukkoa.\n      const updatedTable = prevTable.map(team => ({ ...team }));\n  \n      updatedTable.forEach((team) => {\n        if (team.name === teamA) {\n          team.played++;\n          team.goalsFor += goalsForA;\n          team.goalsAgainst += goalsForB;\n          team.points = goalsForA > goalsForB ? team.points + 2 : team.points;\n        } else if (team.name === teamB) {\n          team.played++;\n          team.goalsFor += goalsForB;\n          team.goalsAgainst += goalsForA;\n          team.points = goalsForB > goalsForA ? team.points + 2 : team.points;\n        }\n        // Maalieron päivitys\n        team.goalDifference = team.goalsFor - team.goalsAgainst;\n      });\n  \n      // Järjestä taulukko uudelleen\n      return updatedTable.sort((a, b) => b.points - a.points || b.goalDifference - a.goalDifference || b.goalsFor - a.goalsFor);\n    });\n  };\n  \n  \n  \n  \n  \n  \n  \n  \n\n  const handleSimulateMatch = () => {\n    if (selectedTeams.length === 2) {\n      setTeamsForMatch(selectedTeams);\n      setShowPopup(true);\n    }\n  };\n\n  const handleCancelMatch = () => {\n    setShowPopup(false);\n    setTeamsForMatch([]);\n  };\n\n  const handleConfirmMatch = () => {\n    const [teamA, teamB] = teamsForMatch;\n    let resultA, resultB;\n  \n    do {\n      resultA = Math.floor(Math.random() * 9);\n      resultB = Math.floor(Math.random() * 9);\n    } while (resultA === resultB);\n  \n    const resultText = `${teamA} VS ${teamB} lopputulos ${resultA}-${resultB}`;\n  \n    setMatchResults((prevResults) => [...prevResults, resultText]);\n    saveToLocalStorage('matchResults', [...matchResults, resultText]);\n  \n    // Päivitä taulukot molemmille joukkueille oikein.\n    updateLeagueTable(teamA, teamB, resultA, resultB);\n  \n    setShowPopup(false);\n    setTeamsForMatch([]);\n    setSelectedTeams([]);\n    saveToLocalStorage('selectedTeams', []);\n    saveToLocalStorage('teamMatches', teamMatches);\n    saveToLocalStorage('teamWins', teamWins);\n  };\n  \n\n  const handleEndSeason = () => {\n    localStorage.clear();\n    setSelectedTeams([]);\n    setMatchResults([]);\n    setTeamWins({});\n    setLeagueTable([]);\n    setTeamMatches({}); // Lisätty\n  };\n\n  const easternTeams = nhlTeams.slice(0, Math.floor(nhlTeams.length / 2));\n  const westernTeams = nhlTeams.slice(Math.floor(nhlTeams.length / 2));\n\n  const getImageUrl = (team) => {\n    const fileName = `${team.split(' ').slice(1).join('_').toLowerCase()}.png`;\n    const imageUrl = `${process.env.PUBLIC_URL}/logos/${fileName}`;\n    return imageUrl;\n  };\n\n  const getImageStyle = () => {\n    const imageSize = '60px';\n\n    return {\n      width: imageSize,\n      height: imageSize,\n    };\n  };\n\n  return (\n    <div>\n\n      <div className=\"team-container\">\n        <div className=\"conference\">\n          {/* <h3>Itäinen konferenssi</h3> Poista tämä kommentti, jos haluat otsikon takaisin */}\n          {easternTeams.map((team, index) => (\n            <div\n              key={index}\n              className={`team-box ${selectedTeams.includes(team) ? 'selected' : ''}`}\n              onClick={() => handleTeamClick(team)}\n            >\n              <img\n                src={getImageUrl(team)}\n                alt={team}\n                style={getImageStyle()}\n              />\n              <p>{team}</p>\n              {selectedTeams.includes(team) && (\n                <FontAwesomeIcon icon={faCheck} className=\"selected-icon\" />\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"conference\">\n          {/* <h3>Läntinen konferenssi</h3> Poista tämä kommentti, jos haluat otsikon takaisin */}\n          {westernTeams.map((team, index) => (\n            <div\n              key={index}\n              className={`team-box ${selectedTeams.includes(team) ? 'selected' : ''}`}\n              onClick={() => handleTeamClick(team)}\n            >\n              <img\n                src={getImageUrl(team)}\n                alt={team}\n                style={getImageStyle()}\n              />\n              <p>{team}</p>\n              {selectedTeams.includes(team) && (\n                <FontAwesomeIcon icon={faCheck} className=\"selected-icon\" />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n      {selectedTeams.length === 2 && (\n        <Button onClick={handleSimulateMatch}>Simuloi ottelu</Button>\n      )}\n      {showPopup && (\n        <SimulateMatchPopup\n          teamA={teamsForMatch[0]}\n          teamB={teamsForMatch[1]}\n          onCancel={handleCancelMatch}\n          onSimulate={handleConfirmMatch}\n        />\n      )}\n      <div className=\"results-container\">\n      <TableContainer component={Paper}>\n  <Table>\n    <TableHead>\n      <TableRow>\n        <TableCell><h2 style={{ color: '#56346' }}>Ottelutulokset</h2></TableCell>\n      </TableRow>\n    </TableHead>\n    <TableBody>\n      {matchResults.map((result, index) => {\n        const teamName = result.split(' ')[0];\n        const opponentName = result.split(' ')[2];\n        const teamImageUrl = getImageUrl(teamName);\n        const opponentImageUrl = getImageUrl(opponentName);\n\n        return (\n          <TableRow key={index}>\n            <TableCell>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <img\n                  src={teamImageUrl}\n                  alt={teamName}\n                  style={{ ...getImageStyle(), marginRight: '8px' }}\n                  onError={(e) => e.target.style.display = 'none'}\n                />\n                <span style={{ color: result.includes('voitti') ? 'green' : 'red' }}>\n                  {result}\n                </span>\n                <img\n                  src={opponentImageUrl}\n                  alt={opponentName}\n                  style={{ ...getImageStyle(), marginLeft: '8px' }}\n                  onError={(e) => e.target.style.display = 'none'}\n                />\n              </div>\n            </TableCell>\n          </TableRow>\n        );\n      })}\n    </TableBody>\n  </Table>\n</TableContainer>\n\n\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                \n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Object.entries(teamWins).map(([team, wins]) => (\n                <TableRow key={team}>\n                  <TableCell>\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                      <img\n                        src={getImageUrl(team)}\n                        alt={team}\n                        style={getImageStyle()}\n                        onError={(e) => e.target.style.display = 'none'}\n                      />\n                      {`${team}: ${wins} voittoa`}\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <div className=\"league-table-container\">\n  <h2>Sarjataulukko</h2>\n  <TableContainer component={Paper}>\n    <Table>\n    <TableHead>\n  <TableRow>\n    <TableCell>Joukkue</TableCell>\n    <TableCell align=\"right\">Pelatut ottelut</TableCell>\n    <TableCell align=\"right\">Maaliero</TableCell>\n    <TableCell align=\"right\">Pisteet</TableCell>\n  </TableRow>\n</TableHead>\n\n<TableBody>\n  {leagueTable.map((team, index) => (\n    <TableRow key={index}>\n      <TableCell component=\"th\" scope=\"row\">\n        <img src={getImageUrl(team.name)} alt={team.name} style={{ width: '25px', height: '25px', marginRight: '10px' }} />\n        {team.name}\n      </TableCell>\n      <TableCell align=\"right\">{team.played}</TableCell>\n      <TableCell align=\"right\">{team.goalDifference}</TableCell>\n      <TableCell align=\"right\">{team.points}</TableCell>\n    </TableRow>\n  ))}\n</TableBody>\n\n    </Table>\n  </TableContainer>\n</div>\n        </TableContainer>\n      </div>\n      <Button className=\"end-season-button\" onClick={handleEndSeason}>\n        Lopeta kausi\n      </Button>\n    </div>\n  );\n};\n\nconst App = () => {\n  const nhlTeams = [\n    'Anaheim Ducks', 'Arizona Coyotes', 'Boston Bruins', 'Buffalo Sabres',\n    'Calgary Flames', 'Carolina Hurricanes', 'Chicago Blackhawks', 'Colorado Avalanche',\n    'Columbus Blue Jackets', 'Dallas Stars', 'Detroit Red Wings', 'Edmonton Oilers',\n    'Florida Panthers', 'Los Angeles Kings', 'Minnesota Wild', 'Montreal Canadiens',\n    'Nashville Predators', 'New Jersey Devils', 'New York Islanders', 'New York Rangers',\n    'Ottawa Senators', 'Philadelphia Flyers', 'Pittsburgh Penguins', 'San Jose Sharks',\n    'Seattle Kraken', 'St. Louis Blues', 'Tampa Bay Lightning', 'Toronto Maple Leafs',\n    'Vancouver Canucks', 'Vegas Golden Knights', 'Washington Capitals', 'Winnipeg Jets',\n  ];\n\n  \n    const [showInstructions, setShowInstructions] = useState(false);\n    const InstructionsPopup = ({ onClose }) => {\n      // Tyylit voivat olla määriteltyinä CSS-tiedostossasi tai tässä suoraan\n      const popupStyles = {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: 'lightblue',\n        padding: '20px',\n        zIndex: '1000',\n        \n        // ... muut tarvittavat tyylit ...\n      };\n    \n      return (\n        <div style={popupStyles}>\n          <h2>OHJEET PELIIN</h2>\n          <p>\n            <div>1.Valitse kaksi joukkuetta. <div>2.Paina Simuloi ottelu.</div> </div> <br></br><div>Ottelun tulos tulostuu alle ja tilastot menevät Sarjataulukkoon.</div>\n          </p>\n          <button onClick={onClose}>Sulje</button>\n        </div>\n      );\n    };\n    return (\n      <Router>\n        {/* ... muut komponentit ja sisällöt ... */}\n  \n        <Tabs value={2} onChange={() => {}}>\n          <Tab label=\"NHL-SIMULOINTI PELI\" component={Link} to=\"/\" />\n          <Tab label=\"OHJEET\" onClick={() => setShowInstructions(true)} />\n        </Tabs>\n  \n        <Routes>\n          <Route path=\"/\" element={<TeamList nhlTeams={nhlTeams} />} />\n        </Routes>\n  \n        {/* Ohjeiden popup */}\n        {showInstructions && (\n          <InstructionsPopup onClose={() => setShowInstructions(false)} />\n        )}\n      </Router>\n    );\n  };\n  \n  export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}